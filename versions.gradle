ext {
    compileSdkVersion = 29
    minSdkVersion = 21
    targetSdkVersion = 29
    buildToolsVersion = "29.0.2"

    versionCode = generateVersionCode()
    versionName = generateVersionName()
}

// 0
private static def majorVersion() {
    return 1
}

// 0
private static def minorVersion() {
    return 0
}

// 00
private static def revisionVersion() {
    return 0
}

static def generateVersionCode() {
    return majorVersion() * 100000 + minorVersion() * 1000 + revisionVersion()
}

static def generateVersionName() {
    def versionName = "${majorVersion()}.${minorVersion()}.${revisionVersion()}"
    def suffix = generateVersionSuffix()

    if (suffix.isEmpty()) {
        return versionName;
    } else {
        return "${versionName}.${suffix}-${commitId()}"
    }
}

static def releaseTime() {
    return new Date().format("yyMMddHHmm", TimeZone.getTimeZone("GMT+08:00"))
}

private static def commitVersion() {
    Process process = "git rev-list --count HEAD".execute()
    process.waitFor()
    return process.getText().toInteger()
}

private static def commitId() {
    Process process = "git rev-parse --short HEAD".execute()
    process.waitFor()
    return process.getText().trim()
}

private static def generateVersionSuffix() {
    Process process = "git symbolic-ref --short -q HEAD".execute()
    process.waitFor()

    def branch = process.getText().trim();

    System.println("generateVersionSuffix: Branch=" + branch)

    switch (branch) {
        case "master":
            return "";
        case "develop":
            return "dev"
        default:
            return branch.replaceAll(File.pathSeparator, "-")
    }
}